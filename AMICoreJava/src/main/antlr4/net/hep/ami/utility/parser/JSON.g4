/*-------------------------------------------------------------------------*/

grammar JSON;

/*-------------------------------------------------------------------------*/

options {
	language = Java;
}

/*-------------------------------------------------------------------------*/
/* JSON PARSER                                                             */
/*-------------------------------------------------------------------------*/

value
	: object
	| array
	| term
	;

object
	: '{' pair (',' pair)* '}'
	| '{' '}'
	;

pair
	: key=STRING ':' val=value
	;

array
	: '[' value (',' value)* ']'
	| '[' ']'
	;

term
	: STRING	# String
	| NUMBER	# Number
	| 'true'	# True
	| 'false'	# False
	| 'null'	# Null
	;

/*-------------------------------------------------------------------------*/
/* JSON LEXER                                                              */
/*-------------------------------------------------------------------------*/

STRING
	: '"' (ESC | ~["\\])* '"'
	| '\'' (ESC | ~['\\])* '\''
	;

NUMBER
	: '-'? INT '.' INT+ EXP?
	| '-'? INT EXP
	| '-'? INT
	;

/*-------------------------------------------------------------------------*/

WS
	: [ \t\n\r]+ -> skip
	;

/*-------------------------------------------------------------------------*/

fragment ESC
	: '\\' (["'\\/bfnrt] | 'u' HEX HEX HEX HEX)
	;

fragment HEX
	: [a-fA-F0-9]
	;

fragment INT
	: [0-9]+
	;

fragment EXP
	: [eE] [+\-]? INT
	;

/*-------------------------------------------------------------------------*/
