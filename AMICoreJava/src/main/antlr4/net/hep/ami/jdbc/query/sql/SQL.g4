/*-------------------------------------------------------------------------*/

grammar SQL;

/*-------------------------------------------------------------------------*/

options {
	language = Java;
}

/*-------------------------------------------------------------------------*/
/* SQL PARSER                                                              */
/*-------------------------------------------------------------------------*/

query returns [ List<String> tokens ]
	@init { $tokens = new ArrayList<>(); }
	: (token	 { $tokens.add($token.v); })*
	;

token returns [ String v ]
	: SPACES		{ $v = $SPACES.getText(); }
	| STRING		{ $v = $STRING.getText(); }
	| PARAMETER		{ $v = $PARAMETER.getText(); }
	| OTHERS		{ $v = $OTHERS.getText(); }
	;

/*-------------------------------------------------------------------------*/
/* SQL LEXER                                                               */
/*-------------------------------------------------------------------------*/

SPACES
	: [ \t\n\r]+
	;

STRING
	: [a-zA-Z0-9_]+
	| '\'' ('\'\'' | ~'\'')* '\''
	| '`' ('``' | ~'`')+ '`'
	| '"' ('""' | ~'"')+ '"'
	;

PARAMETER
	: '?#' INT		/* CRYPTED LABELED PARAMETER */
	| '?' INT		/* LABELED PARAMETER */
	| '?'			/* PARAMETER */
	;

OTHERS
	: .
	;

/*-------------------------------------------------------------------------*/

fragment INT
	: [0-9]+
	;

/*-------------------------------------------------------------------------*/
